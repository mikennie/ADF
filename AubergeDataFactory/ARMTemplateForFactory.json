{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "AubergeDataFactory"
		},
		"AubergeAzureSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AubergeAzureSqlServer'"
		},
		"SalesforceDelphiFDC_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SalesforceDelphiFDC'"
		},
		"SalesforceDelphiFDC_securityToken": {
			"type": "secureString",
			"metadata": "Secure string for 'securityToken' of 'SalesforceDelphiFDC'"
		},
		"SalesforceDelphiFDC_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "jaimejb@aol.com"
		},
		"Auberge Daily Trigger_properties_IncrementalCopyPipeline_parameters_tableList": {
			"type": "string",
			"defaultValue": [
				{
					"TABLE_NAME": "Account",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.AccountTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_SaveAccount",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadAccount"
				},
				{
					"TABLE_NAME": "Contact",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.ContactTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_SaveContact",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadContact"
				},
				{
					"TABLE_NAME": "nihrm__AccountProperty__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__AccountProperty__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__AccountProperty__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadAccountProperty"
				},
				{
					"TABLE_NAME": "nihrm__Booking__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__Booking__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__Booking__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadBooking"
				},
				{
					"TABLE_NAME": "nihrm__BookingDaySnapshot__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__BookingDaySnapshot__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__BookingDaySnapshot__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadBookingDaySnapshot"
				},
				{
					"TABLE_NAME": "nihrm__BookingEvent__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__BookingEvent__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__BookingEvent__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadBookingEvent"
				},
				{
					"TABLE_NAME": "nihrm__BookingOtherIncome__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__BookingOtherIncome__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__BookingOtherIncome__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadBookingOtherIncome"
				},
				{
					"TABLE_NAME": "nihrm__BookingRoomBlock__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__BookingRoomBlock__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__BookingRoomBlock__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadBookingRoomBlock"
				},
				{
					"TABLE_NAME": "nihrm__BookingRoomNight__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__BookingRoomNight__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__BookingRoomNight__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadBookingRoomNight"
				},
				{
					"TABLE_NAME": "nihrm__ComboRoomComponent__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__ComboRoomComponent__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__ComboRoomComponent__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadComboRoomComponent"
				},
				{
					"TABLE_NAME": "nihrm__DateCollection__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__DateCollection__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__DateCollection__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadDateCollection"
				},
				{
					"TABLE_NAME": "nihrm__EventClassification__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__EventClassification__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__EventClassification__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadEventClassification"
				},
				{
					"TABLE_NAME": "nihrm__FunctionRoom__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__FunctionRoom__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__FunctionRoom__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadFunctionRoom"
				},
				{
					"TABLE_NAME": "nihrm__FunctionRoomGroup__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__FunctionRoomGroup__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__FunctionRoomGroup__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadFunctionRoomGroup"
				},
				{
					"TABLE_NAME": "nihrm__FunctionRoomGroupComponent__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__FunctionRoomGroupComponent__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__FunctionRoomGroupComponent__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadFunctionRoomGroupComponent"
				},
				{
					"TABLE_NAME": "nihrm__GuestroomType__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__GuestroomType__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__GuestroomType__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadGuestroomType"
				},
				{
					"TABLE_NAME": "nihrm__GuestroomTypeDay__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__GuestroomTypeDay__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__GuestroomTypeDay__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadGuestroomTypeDay"
				},
				{
					"TABLE_NAME": "nihrm__Location__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__Location__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__Location__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadLocation"
				},
				{
					"TABLE_NAME": "nihrm__PropertyUser__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__PropertyUser__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__PropertyUser__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadPropertyUser"
				},
				{
					"TABLE_NAME": "nihrm__RevenueClassification__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__RevenueClassification__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__RevenueClassification__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadRevenueClassification"
				},
				{
					"TABLE_NAME": "nihrm__RevenueClassificationJunction__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__RevenueClassificationJunction__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__RevenueClassificationJunction__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadRevenueClassificationJunction"
				},
				{
					"TABLE_NAME": "nihrm__SalesGoal__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__SalesGoal__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__SalesGoal__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadSalesGoal"
				},
				{
					"TABLE_NAME": "nihrm__SetupValue__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__SetupValue__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__SetupValue__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadSetupValue"
				},
				{
					"TABLE_NAME": "nihrm__VolumeContract__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__VolumeContract__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__VolumeContract__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadVolumeContract"
				},
				{
					"TABLE_NAME": "nihrm__VolumeContractContact__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__VolumeContractContact__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__VolumeContractContact__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadVolumeContractContact"
				},
				{
					"TABLE_NAME": "nihrm__VolumeContractGuestroomType__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__VolumeContractGuestroomType__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__VolumeContractGuestroomType__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadVolumeContractGuestroomType"
				},
				{
					"TABLE_NAME": "nihrm__VolumeContractPeriod__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__VolumeContractPeriod__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__VolumeContractPeriod__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadVolumeContractPeriod"
				},
				{
					"TABLE_NAME": "nihrm__VolumeContractPickup__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__VolumeContractPickup__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__VolumeContractPickup__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadVolumeContractPickup"
				},
				{
					"TABLE_NAME": "User",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " ",
					"TableType": "stage.UserTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_SaveUser",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadDelphiUser"
				},
				{
					"TABLE_NAME": "nihrm__GuestroomTypeOverride__c",
					"WaterMark_Column": "lastmodifieddate",
					"AdditionalFilter": " AND (IsDeleted = true OR IsDeleted = false) ",
					"TableType": "stage.nihrm__GuestroomTypeOverride__cTableType",
					"StoredProcedureNameForStageOperation": "stage.proc_Savenihrm__GuestroomTypeOverride__c",
					"StoredProcedureNameForLoadOperation": "load.proc_MergeLoadGuestroomTypeOverride"
				}
			]
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalCopyPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IterateSQLTables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSalesForceOrg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.tableList",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LookupOldWaterMarkActivity",
									"description": "This Lookup checks for the watermark date in the ControlMetaData table for each table.  This establishes the starting point for each pull.",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "InitializeDataPull",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderQuery": {
												"value": "select SourceWatermark from admin.ControlMetaData where TableName  =  '@{item().TABLE_NAME}'",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "WatermarkDataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "LookupNewWaterMarkActivity",
									"description": "This Lookup queries the source table to find the max modified date for each table.  This will serve as the upper bound date when the data pull starts and will then persist as the next watermark.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "select MAX(@{item().WaterMark_Column}) as NewWatermarkvalue from @{item().TABLE_NAME}",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "SourceDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "InitializeDataPull",
									"description": "This stored procedure initializes meta data related to the pipeline pull.  See the ControlMetaData table in the sink database.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[concat('[', 'admin].[proc_UpdateControlMetaData]')]",
										"storedProcedureParameters": {
											"UpdateActionType": {
												"value": "S",
												"type": "String"
											},
											"DataSource": {
												"value": "FDC",
												"type": "String"
											},
											"DataSourceId": {
												"value": {
													"value": "@activity('GetSalesForceOrg').output.firstRow.Id",
													"type": "Expression"
												},
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExtractDateTime": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												}
											},
											"PipelineId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AubergeAzureSqlServer",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "IncrementalCopyActivity",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LookupNewWaterMarkActivity",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "GetColumnList",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "@concat('SELECT ', activity('GetColumnList').output.firstRow.ColumnList, ' FROM ', item().TABLE_NAME, ' WHERE ', item().WaterMark_Column, ' > ', formatDateTime(activity('LookupOldWaterMarkActivity').output.firstRow.SourceWatermark,'yyyy-MM-ddTHH:mm:ssZ'), ' AND ', item().WaterMark_Column, ' <= ' , formatDateTime(activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue,'yyyy-MM-ddTHH:mm:ssZ'), item().AdditionalFilter )",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000,
											"preCopyScript": {
												"value": "TRUNCATE TABLE stage.[@{item().TABLE_NAME}]",
												"type": "Expression"
											},
											"sqlWriterStoredProcedureName": {
												"value": "@{item().StoredProcedureNameForStageOperation}",
												"type": "Expression"
											},
											"sqlWriterTableType": {
												"value": "@{item().TableType}",
												"type": "Expression"
											},
											"storedProcedureParameters": {
												"TenancyId": {
													"type": "String",
													"value": {
														"value": "@activity('GetSalesForceOrg').output.firstRow.Id",
														"type": "Expression"
													}
												}
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "SourceDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "SinkSQLServer",
											"type": "DatasetReference",
											"parameters": {
												"SinkTableName": "@{item().TABLE_NAME}"
											}
										}
									]
								},
								{
									"name": "GetColumnList",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "LookupOldWaterMarkActivity",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderQuery": {
												"value": "select ColumnList from admin.ControlMetaData where TableName  =  '@{item().TABLE_NAME}'",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "WatermarkDataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "LoadStageToProduction",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "IncrementalCopyActivity",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@{item().StoredProcedureNameForLoadOperation}",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AubergeAzureSqlServer",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "UpdatePipelineStatus",
									"description": "This stored procedure updates meta data related to the pipeline pull.  See the ControlMetaData table in the sink database.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "LoadStageToProduction",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[concat('[', 'admin].[proc_UpdateControlMetaData]')]",
										"storedProcedureParameters": {
											"UpdateActionType": {
												"value": "E",
												"type": "String"
											},
											"DataSource": {
												"value": "FDC",
												"type": "String"
											},
											"DataSourceId": {
												"value": {
													"value": "@activity('GetSalesForceOrg').output.firstRow.Id",
													"type": "Expression"
												},
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExtractDateTime": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												}
											},
											"PipelineId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceWatermark": {
												"value": {
													"value": "@activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue",
													"type": "Expression"
												},
												"type": "String"
											},
											"RecordCount": {
												"value": {
													"value": "@activity('IncrementalCopyActivity').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AubergeAzureSqlServer",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "GetSalesForceOrg",
						"description": "This lookup gets the Salesforce OrgId.  This identifies a single Salesforce instance.  It is important that the connection has permission to this object.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SalesforceSource",
								"query": "SELECT Id from Organization",
								"readBehavior": "query"
							},
							"dataset": {
								"referenceName": "SourceDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"tableList": {
						"type": "Object"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataSet')]",
				"[concat(variables('factoryId'), '/datasets/WatermarkDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/AubergeAzureSqlServer')]",
				"[concat(variables('factoryId'), '/datasets/SinkSQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkSQLServer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AubergeAzureSqlServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SinkTableName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"typeProperties": {
					"tableName": {
						"value": "@dataset().SinkTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AubergeAzureSqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SalesforceDelphiFDC",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SalesforceObject",
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SalesforceDelphiFDC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WatermarkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AubergeAzureSqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AubergeAzureSqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AubergeAzureSqlServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('AubergeAzureSqlServer_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesforceDelphiFDC')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Salesforce",
				"typeProperties": {
					"environmentUrl": "https://login.salesforce.com",
					"username": "[parameters('SalesforceDelphiFDC_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SalesforceDelphiFDC_password')]"
					},
					"securityToken": {
						"type": "SecureString",
						"value": "[parameters('SalesforceDelphiFDC_securityToken')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Auberge Daily Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "IncrementalCopyPipeline",
							"type": "PipelineReference"
						},
						"parameters": {
							"tableList": "[parameters('Auberge Daily Trigger_properties_IncrementalCopyPipeline_parameters_tableList')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2018-10-25T13:13:00.000Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/IncrementalCopyPipeline')]"
			]
		}
	]
}